var structs = import SS/Data/Structs

func longestLength(l)
  var longest = 0
  for i = 0 .. l.Count()-1
    longest = math.Max(longest, string.Size(l[i]))
  return longest

func LogStrat(y, l, colour)
  >`0,0,@colour@,strat: @l@

// e.g. LogStrat(["#red", "attack"], 0, "right", -1)
// umm, does that example seem correct?

func LogAbovePlayer(l, x_offset, y_offset, increment, alignment)
  ?l.Count() = 0
    return
  
  for i = 0 .. l.Count()-1
    var colour = l[i][0]
    var msg = l[i][1]
    var y = (i*increment)+y_offset
    ?alignment = "right"
      >o@x_offset-string.Size(msg))@,@y@,@colour@,@msg@
    :?alignment = "left"
      >o@x_offset@,@y@,@colour@,@msg@

func LogTopLeft(l)
  for i = 0 .. l.Count()-1
    var colour = l[i][0]
    var k = l[i][1]
    var value = l[i][2]
    >`0,@i+1@,@colour@,@k@: @value@

func LogLowerLeft(x, y, color, message)
  y = y + screen.h
  >`@x@,@y@,@color@,@message@

func LogLowerRight(x, y, color, message)
  x = x + screen.w
  y = y + screen.h
  >`@x@,@y@,@color@,@message@

func LogTopRight(y_offset, messages)
  ?messages.Count() = 0
    return
  var longest = 0
  for i = 0 .. messages.Count()-1
    longest = math.Max(longest, string.Size(messages[i][1]))
  var msg
  var color
  for i = 0 .. messages.Count()-1
    color = messages[i][0]
    msg = messages[i][1]
    // x pos = 
    //   width (go to right of screen)
    // - longest string (make sure they all fit)
    // + offset (align to the right)
    var x = screen.w - longest + (longest - string.Size(msg))
    >`@x@,@y_offset+i+1@,@color@,@msg@

// ---------------------------------------------------
// Format (Fmt) functions:
// Format messages/stats/any info for logging

// FmtValue formats a value safely for logging. Recursively traverses
// arrays to format all values within them.
// Avoids "string.Join() can only join an array of strings"
// e.g.
// - individual values: FmtValue(1)                -> "1"
// - mixed arrays:      FmtValue([1,2,3,"abc"])    -> "[1,2,3,abc]"
// - nested arrays:     FmtValue([1,2,[3,4,"aa"]]) -> "[1,2,[3,4,aa]]"
func _Fmt(value, arr_sep)
  var msg = []
  ?Type(value) ! array
    return string.Format("{0}", value)
  ?value.Count() = 0
    return "[]"

  for i = 0 .. value.Count()-1
    ?Type(value) = array
      msg.Add(FmtValue(value[i]))
    :
      msg.Add(string.Format("{0}", value[i]))
  return "["+string.Join(arr_sep, msg)+"]"

func FmtValue(value)
  return _Fmt(value, ",")

// FmtSafeJoin provides a "safe" way to join an array
// of any type. It avoids the error:
func FmtSafeJoin(sep, data)
  ?Type(data) ! array
    >`0,@screen.h-3@,#red,âš  FmtSafeJoin(sep='@sep@' data='@data@')
    >`0,@screen.h-2@,#red,- data type '@Type(data)@' != 'array'
    return ""
  return _Fmt(data, sep)

func Fmt(data)
  return FmtSafeJoin(" ", data)

// returns an array of [color, message, remainingCooldown]
func FmtCooldownLog(weapon)
  var remaining = item.GetCooldown(weapon)
  var msg = string.Format("{0}: {1}", weapon, remaining)
  ?!item.CanActivate()
    return ["#red", msg, remaining]
  :?remaining > 200
    return ["#red", msg, remaining]
  :?remaining > 100 & remaining <= 200
    // orange
    return [color.FromRGB(255,102,0), msg, remaining]
  :?remaining > 0
    return ["#yellow", msg, remaining]
  :
    return ["#green", msg, remaining]

func FmtCooldownLogs(weapon_ids)
  var logs = []
  for i = 0 .. weapon_ids.Count()-1
    var formatted = FmtCooldownLog(weapon_ids[i])
    ?formatted[2] > 0
      logs.Add(formatted)
  return logs

// weapon formatting --------

// hold shift to show weapons

func FmtItemIDBasic(item_id)
  return string.Join("\n", string.Split(item_id, ","))

var strings = import SS/Data/Strings

func _ShowWeapons(keybind)
  var matches = strings.FindAllIndexes(item.left.id, "_")
  ?key = keybind
    >`0,14,#yellow,l:(@Fmt(matches)@)\n  @FmtItemIDBasic(item.left.id)@\n\nr:@FmtItemIDBasic(item.right.id)@

func ShowWeapons()
  _ShowWeapons(ability1)

func FmtWeaponID(weapon_id)
  // "Explosive Wand Fire wand wand_hidden_fire *10*max* +7/0 D
  // wand_hidden_fire_lv2048_Fire,element_damage_wand_2_Epic7:5-1q103
  //
  // Fire Wand Fire wand *9* +7/0 dF
  // wand_lv1024_Fire,element_damage_wand,dot_ohhit_Epic7:0-1q109

  var parts = string.Split(weapon_id, ",")
  // split up the ID into the 2 main parts,
  // "wand_hidden_fire_lv2048_Fire,element_damage_wand_2_Epic7:5-1q103"
  // -> ["wand_hidden_fire_lv2048_Fire", "element_damage_wand_2_Epic7:5-1q103"]
  ?parts.Count() < 2
    >`0,22,#yellow,c: @parts@
    return
  var craftInfo = parts[0]
  var enchantInfo = parts[1]
  >`0,22,#yellow,c: @craftInfo@
  >`0,23,#yellow,e: @enchantInfo@

  // split up craft info into 3 parts
  // "wand_hidden_fire_lv2048_Fire"
  // -> ["wand_hidden_fire", "lv2048", "Fire"]
  var parts = string.Split(craftInfo, "_")
  ?parts.Count() < 3
    >`0,24,#yellow,c: @parts@
    return
  var weapon = parts[0]
  var lvl = parts[1]
  var element = parts[2]

  // split up enchant info into 2 parts
  // "element_damage_wand_2_Epic7:5-1q103"
  // -> ["element_damage_wand_2_Epic7", "5-1q103"]
  var parts = string.Split(enchantInfo, ":")
  var enchant = parts[0]
  var suffix = parts[1]

  var enchantParts = string.Split(enchant, "_")

  return string.Join("\n", parts)

// --------------------------------------------------
// State Formatting

func FmtItemState(item_state, item_hand)
  ?item_state = 1
    return "idle"
  :?item_state = 2
    return "cast"
  :?item_state = 3
    return "perf"
  :?item_state = 4
    return "cool"
  :
    return string.Format("?? {0}", item_state)

func FmtFoeState(foe_state)
  ?foe_state = 32
    return "prep (32)"
  :?foe_state = 33
    return "attack (33)"
  :?foe_state = 34
    return "complete (34)"
  :?foe_state = 2
    return "wait (2)"
  :
    return foe_state  

var seenItemStatesLeft = []
var itemStateTimesLeft = []
var seenItemStatesRight = []
var itemStateTimesRight = []

var seenFoeStates = []
var foeStateTimes = []

?loc.loop
  seenItemStatesLeft.Clear()
  itemStateTimesLeft.Clear()
  seenItemStatesRight.Clear()
  itemStateTimesRight.Clear()
  seenFoeStates.Clear()
  foeStateTimes.Clear()

func CollectStates(state_name, foe_state, foe_time, seen_states, state_times)
  var state_value = FmtFoeState(foe_state)

  var t = foe_time
  var idx = seen_states.IndexOf(state_value)
  ?idx = -1
    seen_states.Add(state_value)
    state_times.Add(t)
  :?time % 2 = 0
    state_times.Emplace(idx, t)

  var lines = []
  for i = 0 .. seen_states.Count()-1
    ?i = idx
      lines.Add(["#green", string.Format("{0} {1}", seen_states[i], state_times[i])])
    :
      lines.Add(["#white", string.Format("{0} {1}", seen_states[i], state_times[i])])
  return lines

var lastLeftItem = ""
var lastRightItem = ""
var lastFoe = ""

func LogItemStates()
  // item name    > left name   right name
  // state (time) > 1 (2)        1 (2)
  //              > 2 (30)       2 (30)
  //              > 3 (0)        3 (0)
  //              > 4 (5)        4 (5)

  ?lastLeftItem ! item.left.id | string.Size(item.left.id) = 0
    seenItemStatesLeft.Clear()
    itemStateTimesLeft.Clear()
    lastLeftItem = item.left.id
  :
    var leftItemLines = CollectStates(item, item.left.state, item.left.time, seenItemStatesLeft, itemStateTimesLeft)
    ?leftItemLines.Count() > 0
      >`0,4,#yellow,@string.Sub(item.left, 0, math.Min(5, string.Size(item.left)))@
      for i = 0 .. leftItemLines.Count()-1
        >`0,@i+5@,@leftItemLines[i][0]@,@leftItemLines[i][1]@

  ?lastRightItem ! item.right.id | string.Size(item.right.id) = 0
    seenItemStatesRight.Clear()
    itemStateTimesRight.Clear()
    lastRightItem = item.right.id
  :
    var rightItemLines = CollectStates(item, item.right.state, item.right.time, seenItemStatesRight, itemStateTimesRight)
    ?rightItemLines.Count() > 0
      >`6,4,#yellow,@string.Sub(item.right, 0, math.Min(5, string.Size(item.right)))@
      for i = 0 .. rightItemLines.Count()-1
        >`6,@i+5@,@rightItemLines[i][0]@,@rightItemLines[i][1]@

  ?lastFoe ! foe.id | string.Size(foe.id) = 0
    seenFoeStates.Clear()
    foeStateTimes.Clear()
    lastFoe = foe.id
  :
    var foe_name = []
    for line : string.Break(foe, 20)
      foe_name.Add(["#yellow", line])
    LogTopRight(5, foe_name)
    var foeLines = CollectStates(foe, foe.state, foe.time, seenFoeStates, foeStateTimes)
    LogTopRight(5+foe_name.Count(), foeLines)

func cleanBuffString(b, buff_type)
  var idx = string.IndexOf(b, buff_type)
  var buffLen = string.Size(buff_type)
  ?idx = -1
    return b
  
  // it's a buff_: [idx: 0, len: ->]
  ?idx = 0
    return string.Sub(b, buffLen+1)
  // there's a _ before the buff name
  ?string.IndexOf(b, "_", idx-1) ! idx-1
    return b
  // it's a _debuff: [idx: suffix, len: total - length of suffix]
  ?idx-1 = string.Size(b)-(buffLen+1)
    return string.Sub(b, 0, idx-1)
  // it's a _debuff_ in the middle: [idx: suffix, len: total - length of suffix]
  return string.Sub(b, idx+(buffLen+1))

// Formats a string of buffs or debuffs, returning 
// - an array of [color, message] tuples,
// - the longest message size, to use for right-aligning messages
func FmtBuffs(buff_string, buff_type, colour)
  var bfs = []
  var msgs = []

  // check if there are any buffs
  ?string.Size(buff_string) = 0 | string.Equals(buff_string, ",")
    return []
  :
    // if there is only one buff, it won't have a comma
    ?string.IndexOf(buff_string, ",") = -1
      bfs = [buff_string]
    :
      // split the string into an array of buffs
      bfs = string.Split(buff_string, ",")

  var t = ""
  var b = ""
  var c = ""
  var buffTypeLen = string.Size(buff_type)
  // var debuffLen = string.Size("debuff")
  // var buffLen = string.Size("buff")

  ?bfs.Count() = 0
    return []

  // for each buff
  for i = 0 .. bfs.Count()-1
    b = ""
    // if the buff is formatted as
    // "buff:buff_name:level:time_remaining"
    ?string.Size(bfs[i]) = 0
      continue

    ?string.IndexOf(bfs[i], ":") ! -1
      var parts = string.Split(bfs[i], ":")
      c = parts[0]
      b = parts[1]
      t = parts[3]
    :
      // otherwise, the buff is formatted as
      // "buff_string:time_remaining"
      b = bfs[i]
      t = ""
    ?string.Size(b) = 0
      continue

    b = cleanBuffString(b, buff_type)
    msgs.Add([colour, string.Format("{0} {1}:{2}", c, b, t)])
    continue

  ?msgs.Count() = 0
    return []

  return msgs

func FmtBossHealth()
  ?foe = boss & foe.hp > 0
    return string.Format("{0}/{1} {2}%", foe.hp, foe.maxhp, foe.hp*100/foe.maxhp)
  :
    return string.Format("{0}/{1} {2}%", foe.hp, foe.maxhp, 0)


// --------------------------


func LogAllBuffsAndDebuffs()
  // [colour,msg] tuples
  var playerBuffs = FmtBuffs(buffs.string, "buff", "#green")
  var playerDebuffs = FmtBuffs(debuffs.string, "debuff", "#red")

  var foeBuffs = FmtBuffs(foe.buffs.string, "buff", "#green")
  var foeDebuffs = FmtBuffs(foe.debuffs.string, "debuff", "#red")

  for part : string.Split(foe, " ")
    var immunity = string.Sub(part, string.Size("immune_to_"))
    ?part = "immune"
      foeBuffs.Add([
      ^  "#yellow",
      ^  string.Format("{0} {1}:{2}", "x", immunity, "âˆž"),
      ^])
 
  LogAbovePlayer(playerBuffs,   -3, -2, -1, "right")
  LogAbovePlayer(playerDebuffs, -3, -1,  1, "right")
  LogAbovePlayer(foeBuffs,       4, -2, -1, "left")
  LogAbovePlayer(foeDebuffs,     4, -1,  1, "left")

// --------------------------

func LogFoeDistance()
  ?foe.distance = 9999
    return
  LogAbovePlayer([["#yellow", foe.distance]], 0, -2, -1, "left")

// --------------------------

var mostRecentStates = [["","",""], ["","",""]]
var currentHealth = maxhp
var hpLogs = []

?loc.loop
  mostRecentStates = [["","",""], ["","",""]]
  currentHealth = maxhp
  hpLogs.Clear()

func LogStatesBeforeDamage()
  ?hpLogs.Count() > 0
    for i = 0 .. hpLogs.Count()-1
      LogAbovePlayer([["#red", hpLogs[i]]], 0, -3-i, -1, "left")

  ?hpLogs.Count() > 3
    hpLogs.RemoveAt(0)

  // state is the same, don't log
  ?structs.ArraysEqual(mostRecentStates[0], [foe.state, foe.time])
    return
  mostRecentStates[1] = mostRecentStates[0]
  mostRecentStates[0] = [foe.state, foe.time]

  ?hp = currentHealth
    return

  ?hp < currentHealth
    var hpLog = string.Format("{0}: {1} ({2})>{3} ({4})", hp-currentHealth, mostRecentStates[1][0], mostRecentStates[1][1], foe.state, foe.time)
    ?hpLogs.Contains(hpLog) = false
      hpLogs.Add(hpLog)
    currentHealth = hp
    return

  ?hp > currentHealth
    currentHealth = hp

// --------------------------

var AAC_ENABLED = true
var CL_ORANGE = color.FromRGB(255,102,0)

func LogAAC(aac_enabled)
  AAC_ENABLED = aac_enabled

func WriteLogs()
  LogTopLeft([
    ["#white",  "t", Fmt([totaltime, time.FormatCasual(totaltime, true)])],
    ["#blue",   "key", Fmt([string.Break(key, 15)[0]])],
    ["#yellow", "AAC", Fmt([AAC_ENABLED])],
  ])

  LogTopRight(0, [["#green", Fmt([foe.state, foe.time])]])
  LogTopRight(1, [["#green", Fmt([FmtBossHealth()]) ]])

  LogTopRight(2, FmtCooldownLogs([
  ^  "bardiche", "quarterstaff", "heavy_hammer",
  ^  "bash", "dash",
  ^  "mind", "hatchet",
  ^  "staff_aether", "staff_fire", "staff_ice", "staff_poison", "staff_stone", "staff_vigor",
  ^  "skeleton_arm", "mask", "blade",
  ^  "wand_poison", "wand_ice", "wand_fire", "wand_aether", "wand_vigor",
  ^  "talisman_aether", "talisman_fire",
  ^  "cinderwisp", "voidweaver"
  ^]))

  // log buffs and debuffs above the player
  LogAllBuffsAndDebuffs()
  LogItemStates()
  LogFoeDistance()
  // LogStatesBeforeDamage()

  // FmtWeaponID(item.left.id)
