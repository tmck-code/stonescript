var log = import SS/Log
// var info = import Data/Info
var strats = import SS/Strats

var BOSS = false
?loc.begin | loc.loop
  BOSS = false

func FoeImmuneTo(element)
  ?string.IndexOf(foe.buffs.string, string.Format("adaptive_defense_{0}", element)) > 0
    return true
  ?string.IndexOf(foe.buffs.string, element) > 0
    return true
  return false

func HauntedHalls()
  ?loc.loop
    BOSS = false
  log.LogStrat(1, "HauntedHalls", "#green")

  ?strats.canUseBladeDS(4)
    strats.useBladeDS()
    return
  
  // ?strats.MaskOfTheLost()
  //   return

  ?foe = boss & foe ! skeleton_boss
    equipL vigor wand
    equipR poison wand
    ?armor > 14
      ?strats.UseWandAbility("plague", "L")
        return
    return

  ?foe = skeleton_boss & BOSS = true & foe.hp = 0
    BOSS = false
    return

  ?foe = skeleton_boss & !BOSS
    BOSS = true
    return

  ?BOSS
    ?strats.UseWandAbility("plague", "R")
      return
    ?strats.MaskOfTheLost()
      return

    ?(foe.state = 32 | foe.state = 33) & boss = phase2
      equipL vigor wand
      equipR compound shield
      return
    ?foe = ghost
      equip vigor wand +12
      equipR poison wand
      return

    ?!foe.debuffs.string = chill
      equipR ice wand dI
      equipL fire wand +11 df
      return

    ?boss = phase2
      activate potion
    ?strats.UseWandAbility("plague", "R")
      return
    ?strats.UseWandAbility("explosive", "L")
      return

    equip vigor crossbow
    return

  ?strats._Speedy(22)
    return

  ?foe.distance > 12
    ?foe = ghost
      equipL vigor wand
      equipR reset wand +10
    :
      equip vigor crossbow
      return

  ?foe.count > 10
    ?strats.UseWandAbility("calamity", "L")
      return

  ?foe.count < 8 & foe ! ghost
    ?strats.Dash()
      return

  // ?foe.distance > 20
  //   equipL tri
  //   equipR vigor wand +12
  //   return

  equipL vigor wand +12
  equipR reset wand +10

?loc = halls
  HauntedHalls()
