var log    = import SS/Log
var strats = import SS/Strats
var buffs = import SS/Checks/Buffs

buffs._UpdateBuffs()

var needShield = false
var IS_FINAL_BOSS_STAGE = false
var BOSS_TIME = 0
?loc.loop = true
  IS_FINAL_BOSS_STAGE = false
  BOSS_TIME = 0

>`0,10,#white,BOSS_TIME @IS_FINAL_BOSS_STAGE@ @BOSS_TIME@
>`0,11,#white,dot: @buffs.GetFoeBuffLevel("dot")@


func QuickShield()
  // about to be hit! equip the shield
  ?foe.state = 33 & foe.time > 10
    equip compound shield
    needShield = true
    return true
  // was just hit a few frames ago, equip the shield
  // for 2 frames during the next state, just in case (?)
  ?needShield = true & foe.time < 2
    equip compound shield
    return true
  // otherwise, disable the shield flag
  :
    needShield = false
    return false

func IcyRidge()
  log.LogStrat(4, "IcyRidge", "#green")

  ?strats.canUseBladeDS(1)
    strats.useBladeDS()

  ?foe = yeti & !IS_FINAL_BOSS_STAGE
    IS_FINAL_BOSS_STAGE = true

  ?IS_FINAL_BOSS_STAGE
    BOSS_TIME = BOSS_TIME + 1
    ?strats.Speedy() = true
      return

    activate potion

    ?foe.armor <= 0 & BOSS_TIME > 400
      ?strats.MaskOfTheLost() = true
        return

    ?foe = ice_pillar
      equip fire crossbow
      return

    ?armor < 60 & BOSS_TIME > 400
      ?strats.UseWandAbility("explosive", "L")
        return
      ?strats.UseWandAbility("plague", "R")
        return
      // ?strats.UseWandAbility("reset", "L")
      //   return
    ?buffs.GetFoeDebuffLevel("dot") < 1
      equipR fire wand
      equipL fire wand +11 df
      return
    :
      equip fire crossbow
      return

  ?strats._Speedy(19) = true
    return

  ?foe.count > 8
    equipR fire talisman
    equipL fire wand +13

  ?foe = ice_pillar & foe.count < 4
    equipR fire wand
    equipL fire wand +11 df
    return

  ?foe = ice_elemental | foe.distance > 12
    equip fire crossbow
    return

  ?foe.distance > 5
    equipR fire wand +11 df
    equipL fire wand +13
    return

  equipL fire sword
  equipR compound shield
  return

?loc = icy_ridge
  IcyRidge()
