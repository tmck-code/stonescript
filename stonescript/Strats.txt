// global variables
var CanUse = import SS/Checks/CanUse
var LAST_WEAPON_ACTIVATION = 0

// auto-use potion when hp is low
func _AutoPotion(hp_amount)
  ?hp < hp_amount
    activate potion
    return true
  return false

func AutoPotion()
  _AutoPotion(45)

// increase loot
func _LootStar(pickup_dist)
  ?pickup.distance < pickup_dist
    equipL star
    equipR tri
    >o-6,3,#yellow,Loot!!
    return true
  return false

func LootStar()
  return _LootStar(30)

func _Dash(min_dist, max_dist)
  ?foe.distance >= min_dist & foe.distance <= max_dist
    >o0,4,#yellow,→
    // dash cooldown can be -1 for some reason
    ?item.GetCooldown("dash") <= 0
      >o0,4,#green,→
      equipR dash
      activate R
      return true
  >o0,4,#red,→
  return false

func _Bash(min_dist, max_dist)
  ?foe.distance >= min_dist & foe.distance <= max_dist
    >o0,4,#yellow,→
    ?item.GetCooldown("bash") = 0
      >o0,4,#green,→
      equipR bash
      activate R
      return true
  >o0,4,#red,→
  return false

// close distance to the foe
func _DashBash(min_dist, max_dist)
  ?_Bash(min_dist, max_dist)
    return true
  ?_Dash(min_dist, max_dist)
    return true
  return false

func Dash()
  return _Dash(11, 16)

// hoon around in-between the action
func _Speedy(dist, useStar)
  ?foe.distance > dist
    equipL tri
    ?useStar
      equipR star
    >o-6,4,#green,>>
    return true
  >o-6,4,#red,>>
  return false

func Speedy()
  return _Speedy(30, true)

func BeFast(do_speedy, do_dash)
  return (do_speedy & _Speedy(30, true)) | (do_dash & _Dash(11, 16))

func Pickpocket()
  ?item.CanActivate()
  ^& item.GetCooldown("skeleton_arm") = 0
  ^& foe.distance < 9 & foe.distance > 3
  ^& foe ! immune_to_physical
  ^& foe.hp > 0
    equip skeleton_arm
    activate R
    return true
  return false

// weapons ---------------------------------------------------

var MAX_WAND_ABILITY_DISTANCE = 20
var MIN_WAND_ABILITY_FOES = 1

var WandAbilityFoeCheck = new SS/Checks/Foes

WandAbilityFoeCheck.WatchDistance(MAX_WAND_ABILITY_DISTANCE)
WandAbilityFoeCheck.WatchCount(MIN_WAND_ABILITY_FOES)

func UseWandAbility(ability, hand)
  >o0,3,#white,@ability@
  ?!CanUse.AbilityOfWand(ability)
    >o0,3,#red,@ability@
    return false

  ?!WandAbilityFoeCheck.Match()
    >o0,3,#yellow,@ability@
    return false

  ?armor < 14
    >o0,3,#white,@ability@
    activate potion
    return false

  >o0,3,#green,@ability@

  ?hand = "L"
    equipL @ability@ wand
    activate L
    return true
  :?hand = "R"
    equipR @ability@ wand
    activate R
    return true
  return false

// Use the "right" key to trigger the blade of the fallen god
func _ListenForBladeTrigger(keybind)
  ?key = keybind
    >`0,10,Triggered Blade!
    equip blade
    activate R
    return true
  return false

func ListenForBladeTrigger()
  _ListenForBladeTrigger(rightBegin)

func _ListenForSightStoneTrigger(keybind)
  ?key = keybind
    >`0,@screen.h-2@,#green,SightStone!
    equipL sight stone
    activate L
    return true
  return false

func SightStone()
  return _SightStone(ability2)


// equip & activate a two-handed weapon, if the ability is ready
// and the foe is within the specified distance
func UseWeaponIfReady(weapon, dist)
  ?foe.distance <= dist & item.GetCooldown(weapon) <= 0 & item.CanActivate()
    equip @weapon@
    activate R
    return true
  return false

func UseWeaponIfDist(weapon, dist)
  ?foe.distance <= dist & item.CanActivate()
    equip @weapon@
    activate R
    return true
  return false


func UseAvailableTwoHandedWeapon()
  ?foe.distance <= 20 & time - LAST_WEAPON_ACTIVATION > 30
    ?UseWeaponIfReady("bardiche", 10)
      return true
    :?UseWeaponIfReady("quarterstaff", 10)
      return true
    :?UseWeaponIfReady("heavy_hammer", 10)
      return true
  return false

func UseAvailableLostWeapons()
  ?item.GetCooldown("mask") = 0
    activate R
    return true
  :?UseWeaponIfReady("blade", 10)
    return true
  return false

// weapons (lost) --------------------------------------------

// use blade of the fallen god if there are enough foes
func BigBlade(min_foes)
  ?foe.count >= min_foes
    return UseWeaponIfReady("blade", 20)
  return false

func MaskOfTheLost()
  ?item.GetCooldown("mask") = 0 & item.CanActivate() & foe.distance <= 20
    equipR mask
    activate R
    return true
  return false

// Use the "right" key to trigger the blade of the fallen god
func ListenForBladeTrigger()
  ?key = rightBegin
    >0,10,Triggered Blade!
    equip blade
    activate R
    LAST_WEAPON_ACTIVATION = time
    return true
  return false

func canUseBlade()
  return item.GetCooldown("blade") <= 0

// cannot be interrupted, doesn't need a cooldown check
func useBlade()
  equip blade
  activate R
  return

/* Checks if Blade of the Fallen God
can be used in 2 screens of distance,
according to a certain screen index. */
func canUseBladeDS(nScreen)
  return canUseBlade()
  ^& screen.i = nScreen

var slideCount = 0 // counter to give screen.Next() time to slide
func useBladeDS()
  ?slideCount = 0
    screen.Next()
    slideCount = 20

  :?slideCount > 0
    slideCount--

    ?slideCount = 0
      useBlade()
      screen.ResetOffset()
      return
