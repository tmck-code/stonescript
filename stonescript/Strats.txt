// global variables
var LAST_WEAPON_ACTIVATION = 0

// close distance to the foe
func Dash_(min_dist, max_dist)
  ?foe.distance >= min_dist & foe.distance <= max_dist
    >o0,4,#green,→
    // var weaponR = item.right
    equipR bash
    activate R
    // ?string.Size(weaponR) > 0
    //   equipR @weaponR@
    return true
  :
    >o0,4,#red,→
    return false

func Dash()
  return Dash_(11, 16)

// hoon around in-between the action
// returns true if applied, false otherwise
func Speedy_(dist)
  ?foe.distance > dist
    equipL star
    equipR tri
    >o-6,4,#green,>>
    return true
  >o-6,4,#red,>>
  return false

func Speedy()
  return Speedy_(30)

func BeFast(do_speedy, do_dash)
  return (do_speedy & Speedy(30)) | (do_dash & Dash(11, 16))

func Pickpocket()
  ?item.CanActivate()
  ^& item.GetCooldown("skeleton_arm") = 0
  ^& foe.distance < 9 & foe.distance > 3
  ^& foe ! immune_to_physical
  ^& foe.hp > 0
    equip skeleton_arm
    activate R
    return true
  return false

// weapons ---------------------------------------------------

// equip & activate a two-handed weapon, if the ability is ready
// and the foe is within the specified distance
func UseWeaponIfReady(weapon, dist)
  ?foe.distance <= dist & item.GetCooldown(weapon) <= 0 & item.CanActivate()
    equip @weapon@
    activate R
    return true
  return false

func UseWeaponIfDist(weapon, dist)
  ?foe.distance <= dist & item.CanActivate()
    equip @weapon@
    activate R
    return true
  return false


func UseAvailableTwoHandedWeapon()
  ?foe.distance <= 20 & time - LAST_WEAPON_ACTIVATION > 30
    ?UseWeaponIfReady("bardiche", 10)
      return true
    :?UseWeaponIfReady("quarterstaff", 10)
      return true
    :?UseWeaponIfReady("heavy_hammer", 10)
      return true
  return false

func UseAvailableLostWeapons()
  ?item.GetCooldown("mask") = 0
    activate R
    return true
  :?UseWeaponIfReady("blade", 10)
    return true
  return false

// weapons (lost) --------------------------------------------

// use blade of the fallen god if there are enough foes
func BigBlade(min_foes)
  ?foe.count >= min_foes
    return UseWeaponIfReady("blade", 20)
  return false

func MaskOfTheLost()
  ?item.GetCooldown("mask") = 0 
    equipR mask
    activate R
    return true
  return false

// Use the "right" key to trigger the blade of the fallen god
func ListenForBladeTrigger()
  ?key = rightBegin
    >0,10,Triggered Blade!
    equip blade
    activate R
    LAST_WEAPON_ACTIVATION = time
    return true
  return false

func canUseBlade()
  return item.GetCooldown("blade") <= 0

// cannot be interrupted, doesn't need a cooldown check
func useBlade()
  equip blade
  activate R
  return

/* Checks if Blade of the Fallen God
can be used in 2 screens of distance,
according to a certain screen index. */
func canUseBladeDS(nScreen)
  return canUseBlade()
  ^& screen.i = nScreen

var slideCount = 0 // counter to give screen.Next() time to slide
func useBladeDS()
  ?slideCount = 0
    screen.Next()
    slideCount = 20

  :?slideCount > 0
    slideCount--

    ?slideCount = 0
      useBlade()
      screen.ResetOffset()
      return