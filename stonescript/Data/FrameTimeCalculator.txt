// this is a struct that stores the time taken to complete each level,
// storing the time every 1 second (30 frames)
//
// it has helper funtions to serialise and deserialise the data to storage
// so that previous times can be compared

var FRAMES_PER_SECOND = 30

var frameNArray = []
var prevFrameNArray = []
var xPosArray = []
var prevXPosArray = []

var totalX = 0
var totalFrames = 0
var posX = 0

var offsetX = 0

var diffFrames = 0
var diffX = 0

var currX = 0

var xPosStorageKey = string.Format("{0}_{1}_{2}", loc.id, loc.stars, "xpos")
var frameNStorageKey = string.Format("{0}_{1}_{2}", loc.id, loc.stars, "frames")

var prevXPosArrayStrs = []

var logColour = #yellow
var deltaLogColour = #red

var PANEL = 0
var STYLE_LINED_BOX = ui.AddStyle(＂┌─┐│ │└─┘＂)
var XPOS_TEXT = ""
var FRAMES_TEXT = ""

func InitUI()
  // PANEL = ui.AddPanel()
  // PANEL.style = STYLE_LINED_BOX
  // PANEL.anchor = bottom_left
  // PANEL.dock = bottom_left
  // PANEL.h = 4
  // PANEL.w = 50
  // PANEL.y = PANEL.y - 4
  // PANEL.x = PANEL.x + 1
  XPOS_TEXT = ui.AddText()
  XPOS_TEXT.anchor = bottom_left
  FRAMES_TEXT = ui.AddText()
  FRAMES_TEXT.anchor = bottom_left
  XPOS_TEXT.dock = bottom_left
  FRAMES_TEXT.dock = bottom_left
  XPOS_TEXT.y = XPOS_TEXT.y - 1
  XPOS_TEXT.w = 50
  FRAMES_TEXT.w = 50

  // PANEL.Add(XPOS_TEXT, 0)
  // XPOS_TEXT.x = PANEL.x - 24
  // XPOS_TEXT.y = PANEL.y + 3
  // PANEL.Add(FRAMES_TEXT, 1)
  // FRAMES_TEXT.y = XPOS_TEXT.y + 1
  // FRAMES_TEXT.x = XPOS_TEXT.x
  // XPOS_TEXT.text = ""
  // FRAMES_TEXT.text = ""

func Init()
  // this is the main function that is called when the script is loaded
  // it sets up the arrays and the storage for the time taken
  frameNArray.Clear()
  prevFrameNArray.Clear()
  xPosArray.Clear()
  prevXPosArray.Clear()

  totalX = 0
  totalFrames = 0

  // load the previous times from storage. once a key has been stored a single time,
  // even if it's "Deleted", it will always be present, so we need to use Get with a default value
  ?storage.Get(frameNStorageKey, -1) ! -1
    var prevFrameNArrayStrs = string.Split(storage.Get(frameNStorageKey), ",")
    for i = 0 .. prevFrameNArrayStrs.Count()-1
      var n = math.BigNumber(prevFrameNArrayStrs[i]).ToFloat()
      prevFrameNArray.Add(n)
      totalFrames = n

  ?storage.Get(xPosStorageKey, -1) ! -1 
    prevXPosArrayStrs = string.Split(storage.Get(xPosStorageKey), ",")
    for i = 0 .. prevXPosArrayStrs.Count()-1
      var n = math.BigNumber(prevXPosArrayStrs[i]).ToFloat()
      prevXPosArray.Add(n)
      totalX = n

func LogXPosDiff(_posX, _totalX, _msgOffset)
  ?xPosArray.Count() = 0 | prevXPosArray.Count() = 0
    return
  var diffX = 0
  // compare the current x position to the previous x position
  ?prevXPosArray.Count() >= xPosArray.Count()
    diffX = _posX - prevXPosArray[xPosArray.Count()-1]
  :
    // or compare the current x position to the last-most previous x position
    diffX = _posX - prevXPosArray[prevXPosArray.Count()-1]
  // check if our x position is better or worse than the previous
  ?diffX >= 0
    deltaLogColour = #green
  :
    deltaLogColour = #red
  // print the difference in x position
  >`@_msgOffset+3@,15,@deltaLogColour@,@string.Format("▲{0:N0}", diffX)@

func Log(_posX, _totalX, _frameN, _totalFrames)
  // print basic info if no previous times
  ?_totalX = 0
    XPOS_TEXT.text = string.Format("X: {0,5:N0}", _posX)
    // >`0,15,#yellow,x:@string.Format("{0,5:N0}", _posX)@
    FRAMES_TEXT.text = string.Format("F: {0,5:N0}", _frameN)
    // >`0,16,#yellow,f:@string.Format("{0,5:N0}", _frameN)@
  :
    ?_totalFrames = loc.bestTime
      // if we have a best time, then set the colour to green
      logColour = #green
    :
      logColour = #yellow
    // print the time taken and the x position, and how far we are to the total
    var msg = string.Format("{0,5:N0}/{1,5:N0} {2:N1}%", _posX, _totalX, (100*_posX)/_totalX)
    XPOS_TEXT.text = msg
    FRAMES_TEXT.text = string.Format("F: {0,5:N0}/{1,5:N0} {2:N1}%", _frameN, _totalFrames, (100*_frameN)/_totalFrames)

    // if we should be updating (as per total frame N / time)
    LogXPosDiff(_posX, _totalX, string.Size(msg))

// this is the main public function that can be called to update the time
func Update()
  // if we should be updating (as per total frame N / time)
  ?(totaltime % FRAMES_PER_SECOND) % 2 = 0
    frameNArray.Add(math.BigNumber(totaltime).ToFloat())

    // sometimes, the pos.x can reset to 0 mid-level -_-
    // first, check if the x position is <= 0, and not at the beginning of the level
    ?pos.x <= 0 & !loc.loop & !loc.begin
      // now, check if the x position is less than the previous x position, but also handle negative x positions
      // e.g. starting again at -20, then going to -19 will NOT reset the "offsetX"
      ?pos.x < currX
        // if we really have a reset x position, then set the offsetX to the previous x position
        // e.g. pos.x 100 > 101 > -20 will set the offsetX to 101
        offsetX = posX
    currX = math.BigNumber(pos.x).ToFloat()
    posX = offsetX + currX
    xPosArray.Add(posX)

  // log the current stats
  Log(posX, totalX, totaltime, totalFrames)

  // if we have just looped around (started at 0 again), then store struct and reset vars
  ?!(loc.loop)
    return

  // check if the arrays are empty
  ?frameNArray.Count() = 0 & xPosArray.Count() = 0
    return
  
  totalFrames = frameNArray[frameNArray.Count()-1]
  totalX = xPosArray[xPosArray.Count()-1]

  var frameNArrayStrs = []
  var xPosArrayStrs = []
  for frameN : frameNArray
    frameNArrayStrs.Add(math.BigNumber(frameN).ToString())
  for xPos : xPosArray
    xPosArrayStrs.Add(math.BigNumber(xPos).ToString())

  storage.Set(frameNStorageKey, string.Join(",", frameNArrayStrs))
  storage.Set(xPosStorageKey,   string.Join(",", xPosArrayStrs))

  // clear & initialise the arrays
  prevFrameNArray.Clear()
  for frameN : frameNArray
    prevFrameNArray.Add(frameN)

  prevXPosArray.Clear()
  for xPos : xPosArray
    prevXPosArray.Add(xPos)

  // finally, empty the arrays
  frameNArray.Clear()
  xPosArray.Clear()

  posX = 0
  offsetX = 0
  currX = 0
