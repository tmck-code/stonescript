// this is a struct that stores the time taken to complete each level,
// storing the time every 1 second (30 frames)
//
// it has helper funtions to serialise and deserialise the data to storage
// so that previous times can be compared

var log = import SS/Log

var FRAMES_PER_SECOND = 30

var frameNArray = []
var prevFrameNArray = []
var xPosArray = []
var prevXPosArray = []

var totalX = 0
var totalFrames = 0
var posX = 0

var offsetX = 0
var diffFrames = 0
var diffX = 0
var currX = 0

var xPosStorageKey = string.Format("{0}_{1}_{2}", loc.id, loc.stars, "xpos")
var frameNStorageKey = string.Format("{0}_{1}_{2}", loc.id, loc.stars, "frames")

var prevXPosArrayStrs = []

var logColour = #yellow
var deltaLogColour = #red

// var REGULAR_STYLE_STR = ＂┌─┐│ │└─┘＂
var REGULAR_STYLE_STR = ＂├─┤│ │└─┘＂
var REGULAR_STYLE = ui.AddStyle(REGULAR_STYLE_STR)

var STYLE_LINED_BOX_NO_BOTTOM = ui.AddStyle(＂├─┤│ │   ＂)
var STYLE_LINED_BOX_RHS = ui.AddStyle(＂┌─┐│     ＂)


var XPOS_TEXT = ""
var FRAMES_TEXT = ""
var TIME_TEXT = ""

var XPOS_PCT_TEXT = ""
var FRAMES_PCT_TEXT = ""

var XPOS_TOTAL_TEXT = ""
var FRAMES_TOTAL_TEXT = ""
var TIME_TOTAL_TEXT = ""

var XPOS_DELTA_TEXT = ""
var FRAMES_DELTA_TEXT = ""

var TIMES_PANEL = -1
var TIMES_TOTAL_TEXT = ""

func MakeColumnPanel(_x, _y, _w)
  var panel = ui.AddPanel()
  panel.dock = top_left
  panel.anchor = top_left
  panel.x = _x
  panel.y = _y
  panel.w = _w
  panel.h = 3

  return panel

func AddRowToColumn(_column_panel, _h, _style)
  var panel = ui.AddPanel()

  var rowY = 0
  for child : _column_panel.children
    rowY = child.y + _h

  _column_panel.Add(panel)

  panel.dock = top_left
  panel.anchor = top_left
  panel.y = rowY
  panel.x = 0
  panel.w = _column_panel.w
  panel.h = _h
  panel.style = _style

  _column_panel.h = _column_panel.h + _h

  var text = ui.AddText()
  text.anchor = top_left
  text.dock = top_left
  text.x = text.x + 1
  text.y = text.y + 1
  text.text = "!"

  panel.Add(text)

  return text

func MakeTextPanel(_x, _y, _w, _h, _style)
  var panel = ui.AddPanel()
  panel.anchor = top_left
  panel.dock = top_left
  panel.style = _style
  panel.w = _w
  panel.h = _h
  panel.x = panel.x + _x
  panel.y = _y

  var text = ui.AddText()
  text.anchor = bottom_left
  text.dock = bottom_left
  text.w = _w
  text.y = text.y + panel.h
  text.x = panel.x - _x + 1
  text.text = string.Format("{0,5}", "??")

  panel.Add(text)

  return text

func InitUI()
  XPOS_TEXT           = MakeTextPanel(6, 6,  7, 3, ui.AddStyle(＂ ─┐│ │└─┘＂))
  XPOS_TOTAL_TEXT     = MakeTextPanel(6, 8,  7, 3, ui.AddStyle(＂├─┤  │└─┘＂))
  XPOS_PCT_TEXT       = MakeTextPanel(6, 10, 7, 3, ui.AddStyle(＂├─┤  │└─┘＂))
  XPOS_DELTA_TEXT     = MakeTextPanel(6, 12, 7, 3, ui.AddStyle(＂├─┤  │└─┘＂))

  FRAMES_TEXT         = MakeTextPanel(0,  6,  7, 3, ui.AddStyle(＂f─x│ │└─┘＂))
  FRAMES_TOTAL_TEXT   = MakeTextPanel(0,  8,  7, 3, ui.AddStyle(＂├─┼Σ │└─┘＂))
  FRAMES_PCT_TEXT     = MakeTextPanel(0,  10, 7, 3, ui.AddStyle(＂├─┼% │└─┘＂))
  FRAMES_DELTA_TEXT   = MakeTextPanel(0,  12, 7, 3, ui.AddStyle(＂├─┼▲ │└─┴＂))

  // TIMES_PANEL = MakeColumnPanel(10, 10, 5)
  // TIMES_TOTAL_TEXT = AddRowToColumn(TIMES_PANEL, 3, REGULAR_STYLE)

func Init()
  // this is the main function that is called when the script is loaded
  // it sets up the arrays and the storage for the time taken
  frameNArray.Clear()
  prevFrameNArray.Clear()
  xPosArray.Clear()
  prevXPosArray.Clear()

  totalX = 0
  totalFrames = 0

  // load the previous times from storage. once a key has been stored a single time,
  // even if it's "Deleted", it will always be present, so we need to use Get with a default value
  ?storage.Get(frameNStorageKey, -1) ! -1
    var prevFrameNArrayStrs = string.Split(storage.Get(frameNStorageKey), ",")
    for i = 0 .. prevFrameNArrayStrs.Count()-1
      var n = math.BigNumber(prevFrameNArrayStrs[i]).ToFloat()
      prevFrameNArray.Add(n)
      totalFrames = n
  :?loc.bestTime ! -1
    totalFrames = loc.bestTime

  ?storage.Get(xPosStorageKey, -1) ! -1
    prevXPosArrayStrs = string.Split(storage.Get(xPosStorageKey), ",")
    for i = 0 .. prevXPosArrayStrs.Count()-1
      var n = math.BigNumber(prevXPosArrayStrs[i]).ToFloat()
      prevXPosArray.Add(n)
      totalX = n

// this function takes the current x position (at the current frame/time), and
// compares it to the x position at the same frame/time in the previous run
// - every array stored/used by this script has the same length
// - so, just get the current array size
// - and compare the current x position to the previous x position
func CalcXPosDiff(_posX, _totalX, _msgOffset)
  ?xPosArray.Count() = 0 | prevXPosArray.Count() = 0
    return
  var diffX = 0
  // compare the current x position to the previous x position
  ?prevXPosArray.Count() >= xPosArray.Count()
    diffX = _posX - prevXPosArray[xPosArray.Count()-1]
  :
    // or compare the current x position to the last-most previous x position
    diffX = _posX - prevXPosArray[prevXPosArray.Count()-1]
  return diffX

// this function takes the current frame/time (and x position), and
// and looks up the previous run x positions to see what the frame/time was,
// and diffs the twwo 
func CalcFrameNDiff(_posX, _frameN, _totalFrames, _msgOffset)
  var diffX = 0
  // compare the current x position to the previous x position
  ?prevXPosArray.Count() >= xPosArray.Count() & xPosArray.Count() > 0
    diffX = _posX - prevXPosArray[xPosArray.Count()-1]
  :
    // or compare the current x position to the last-most previous x position
    diffX = _posX - prevXPosArray[prevXPosArray.Count()-1]

  ?frameNArray.Count() = 0 | prevFrameNArray.Count() = 0
    return
  // find the index of our current x pos in the previous run
  var i = prevXPosArray.IndexOf(_posX)
  ?i = -1 | i >= prevFrameNArray.Count()
    return

  return prevFrameNArray[i] - _frameN

func Log(_posX, _totalX, _frameN, _totalFrames)
  // print basic info if no previous times
  ?_totalX = 0
    XPOS_TEXT.text = string.Format("{0,5:N0}", _posX)
    FRAMES_TEXT.text = string.Format("{0,5:N0}", _frameN)

    FRAMES_TEXT.text = string.Format("{0,5:N0}", _frameN)
    ?_totalFrames > 0
      FRAMES_TOTAL_TEXT.text = string.Format("{0,5:N0}", _totalFrames)
      FRAMES_PCT_TEXT.text = string.Format("{0,5:N2}", (100*_frameN)/_totalFrames)
  :
    ?_totalFrames = loc.bestTime
      // if we have a best time, then set the colour to green
      logColour = #green
    :
      logColour = #yellow
    // print the time taken and the x position, and how far we are to the total
    XPOS_TEXT.text = string.Format("{0,5:N0}", _posX)
    XPOS_TOTAL_TEXT.text = string.Format("{0,5:N0}", _totalX)
    XPOS_PCT_TEXT.text = string.Format("{0,5:N1}", (100*_posX)/_totalX)
    XPOS_DELTA_TEXT.text = string.Format("{0,5:N0}", CalcXPosDiff(_posX, _totalX, 20))

    FRAMES_TEXT.text = string.Format("{0,5:N0}", _frameN)
    FRAMES_TOTAL_TEXT.text = string.Format("{0,5}", _totalFrames)
    FRAMES_PCT_TEXT.text = string.Format("{0,5:N1}", (100*_frameN)/_totalFrames)
    FRAMES_DELTA_TEXT.text = string.Format("{0,5:N0}", CalcFrameNDiff(_posX, _frameN, _totalFrames, 20))


// this is the main public function that can be called to update the time
func Update()
  // if we should be updating (as per total frame N / time)
  ?(totaltime % FRAMES_PER_SECOND) % 2 = 0
    frameNArray.Add(math.BigNumber(totaltime).ToFloat())

    // sometimes, the pos.x can reset to 0 mid-level -_-
    // first, check if the x position is <= 0, and not at the beginning of the level
    ?pos.x <= 0 & !loc.loop & !loc.begin
      // now, check if the x position is less than the previous x position, but also handle negative x positions
      // e.g. starting again at -20, then going to -19 will NOT reset the "offsetX"
      ?pos.x < currX
        // if we really have a reset x position, then set the offsetX to the previous x position
        // e.g. pos.x 100 > 101 > -20 will set the offsetX to 101
        offsetX = posX
    currX = math.BigNumber(pos.x).ToFloat()
    posX = offsetX + currX
    xPosArray.Add(posX)

  // log the current stats
  Log(posX, totalX, math.BigNumber(totaltime).ToFloat(), totalFrames)

  // if we have just looped around (started at 0 again), then store struct and reset vars
  ?!(loc.loop)
    return

  // check if the arrays are empty
  ?frameNArray.Count() = 0 & xPosArray.Count() = 0
    return

  totalFrames = frameNArray[frameNArray.Count()-1]
  totalX = xPosArray[xPosArray.Count()-1]

  ?totalFrames < loc.bestTime
    var frameNArrayStrs = []
    var xPosArrayStrs = []
    for frameN : frameNArray
      frameNArrayStrs.Add(math.BigNumber(frameN).ToString())
    for xPos : xPosArray
      xPosArrayStrs.Add(math.BigNumber(xPos).ToString())

    storage.Set(frameNStorageKey, string.Join(",", frameNArrayStrs))
    storage.Set(xPosStorageKey,   string.Join(",", xPosArrayStrs))

  // clear & initialise the arrays
  prevFrameNArray.Clear()
  for frameN : frameNArray
    prevFrameNArray.Add(frameN)

  prevXPosArray.Clear()
  for xPos : xPosArray
    prevXPosArray.Add(xPos)

  // finally, empty the arrays
  frameNArray.Clear()
  xPosArray.Clear()

  posX = 0
  offsetX = 0
  currX = 0
