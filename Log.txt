// logging print to a specific location ---------------------

func longestLength(l)
  var longest = 0
  for i = 0 .. l.Count()-1
    longest = math.Max(longest, string.Size(l[i]))
  return longest


func LogStrat(y, l, colour)
  >`0,0,@colour@,strat: @l@

func LogAbovePlayer(l, x_offset, alignment)
  var len = 0
  for i = 0 .. l.Count()-1
    len = math.Max(len, string.Size(l[i][1]))
  
  for i = 0 .. l.Count()-1
    ?alignment = "right"
      >o@x_offset+(len-string.Size(l[i][1]))@,@-1-i@,@l[i][0]@,@l[i][1]@
    :?alignment = "left"
      >o@x_offset@,@-1-i@,@l[i][0]@,@l[i][1]@

func LogTopLeft(l)
  for i = 0 .. l.Count()-1
    >`0,@i+1@,@l[i][0]@,@l[i][1]@: @l[i][2]@

func LogLowerLeft(x, y, color, message)
  y = y + screen.h
  >`@x@,@y@,@color@,@message@

func LogLowerRight(x, y, color, message)
  x = x + screen.w
  y = y + screen.h
  >`@x@,@y@,@color@,@message@

func LogTopRight(x, y_offset, messages)
  ?messages.Count() = 0
    return
  var longest = 0
  for i = 0 .. messages.Count()-1
    longest = math.Max(longest, string.Size(messages[i][1]))
  var msg
  var color
  for i = 0 .. messages.Count()-1
    color = messages[i][0]
    msg = messages[i][1]
    // x pos = 
    //   width (go to right of screen)
    // - longest string (make sure they all fit)
    // + offset (align to the right)
    var x = screen.w - longest + (longest - string.Size(msg))
    >`@x@,@y_offset+i+1@,@color@,@msg@

// formatting ----------------------------------------

func FmtValue(value)
  var msg = []
  ?Type(value) ! array
    return string.Format("{0}", value)

  for i = 0 .. value.Count()-1
    ?Type(value) = array
      msg.Add(FmtValue(value[i]))
    :
      msg.Add(string.Format("{0}", value[i]))
  return "["+string.Join(",", msg)+"]"

func FmtWithSep(data, sep)
  var strParts = []
  for i = 0 .. data.Count()-1
    strParts.Add(FmtValue(data[i]))
  return string.Join(sep, strParts)

func Fmt(data)
  return FmtWithSep(data, " ")

// returns an array of [color, message]
func FormatCooldownLog(weapon)
  var canUse = item.GetCooldown(weapon) <= 0 & item.CanActivate()
  var msg = string.Format("{0}: {1}", weapon, item.GetCooldown(weapon))
  ?!item.CanActivate()
    return ["#red", msg]
  :?item.GetCooldown(weapon) > 200
    return ["#red", msg]
  :?item.GetCooldown(weapon) > 100 & item.GetCooldown(weapon) <= 200
    // orange
    return [color.FromRGB(255,102,0), msg]
  :?item.GetCooldown(weapon) > 0
    return ["#yellow", msg]
  :
    return ["#green", msg]

func FormatCooldownLogs(weapon_ids)
  var logs = []
  for i = 0 .. weapon_ids.Count()-1
    var formatted = FormatCooldownLog(weapon_ids[i])
    ?formatted[0] ! "#green"
      logs.Add(formatted)
  return logs

func FormatWeaponName(weapon)
  ?weapon = "blade"
    return "Blade of the Fallen God"
  :?weapon = "bardiche"
    return "Bardiche"
  :?weapon = "quarterstaff"
    return "Quarterstaff"
  :?weapon = "heavy_hammer"
    return "Heavy Hammer"
  :
    return weapon

func FormatFoeState()
  ?foe.state = 32
    return "attack prepare"
  :?foe.state = 33
    return "attack do"

func FormatItemState(item_state)
  // 1 is idle/checking for targets
  ?item_state = 1
    return "|     "
  // 2 is cast/ pre-damage animation
  :?item_state = 2
    return "|==>  "
  // 3 is perf/ post-damage animation
  :?item_state = 3
    return "|==> ~"
  // 4 is cooldown, waiting until it can be used again
  // (for regular attacks, abilities dont use it)
  :?item_state = 4
    return "xxxxxx"

func FormatItemStates()
  return [FormatItemState(item.left.state), FormatItemState(item.right.state)]

// Formats a string of buffs or debuffs, returning 
// - an array of [color, message] tuples,
// - the longest message size, to use for right-aligning messages
func FmtBuffs(buff_string)
  var bfs = []
  var msgs = []
  var longestMsgSize = 0

  // check if there are any buffs
  ?string.Size(buff_string) = 0 | string.Equals(buff_string, ",")
    msgs = [["#yellow", "none"]]
    longestMsgSize = 4
    return [msgs, longestMsgSize]
  :
    // if there is only one buff, it won't have a comma
    ?string.IndexOf(buff_string, ",") = -1
      bfs = [buff_string]
    :
      // split the string into an array of buffs
      bfs = string.Split(buff_string, ",")

  var t = ""
  var debuffLen = string.Size("debuff")
  var buffLen = string.Size("buff")

  ?bfs.Count() = 0
    msgs = [["#yellow", "none"]]
    longestMsgSize = 4
    return [msgs, longestMsgSize]

  // for each buff
  for i = 0 .. bfs.Count()-1
    var b = ""
    // if the buff is formatted as
    // "buff:buff_name:level:time_remaining"
    ?string.Size(bfs[i]) = 0
      continue

    ?string.IndexOf(bfs[i], ":") ! -1
      var parts = string.Split(bfs[i], ":")
      b = parts[1]
      t = parts[3]
    :
      // otherwise, the buff is formatted as
      // "buff_string:time_remaining"
      b = bfs[i]
      t = ""

    ?string.Size(b) > 0
      longestMsgSize = math.Max(longestMsgSize, string.Size(b))
      // now, detect if buff is a buff or a debuff
      // and strip _debuff_ prefixes & suffixes
      var idx = string.IndexOf(b, "debuff")

      // it's a buff
      ?idx = -1
        idx = string.IndexOf(b, "buff")
        ?idx = 0
          b = string.Sub(b, buffLen+1)
        :?idx+buffLen = string.Size(b)
          b = string.Sub(b, idx)
        :
          // b = string.Sub(b, idx1+string.Size(b))
          b = string.Sub(b, idx-1+debuffLen)
        b = FmtWithSep([b, t], ":")
        msgs.Add(["#green", Fmt([b]) ])
        continue

      // it's a debuff_ prefix
      ?idx = 0
        b = string.Sub(b, debuffLen+1)
      // it's a _debuff suffix
      :?idx + debuffLen = string.Size(b)
        b = string.Sub(b, idx-1)
      // it's a _debuff_ in the middle
      :
        b = string.Sub(b, idx-1+debuffLen)

      b = FmtWithSep([b, t], ":")
      msgs.Add(["#red", Fmt([b]) ])

  ?msgs.Count() = 0
    msgs = [["#yellow", "none"]]
    longestMsgSize = 4

  return [msgs, longestMsgSize]

func LogAllBuffsAndDebuffs()
  // [[colour,msg] tuples, longest msg size]
  // longest msg size is used to right-align the left logs (mine)
  var mine = FmtBuffs(string.Join(",", [buffs.string, debuffs.string]))
  var foes = FmtBuffs(string.Join(",", [foe.buffs.string, foe.debuffs.string]))

  LogAbovePlayer(mine[0], -3-mine[1], "right")
  LogAbovePlayer(foes[0], 4, "left")

// --------------------------

var bossFinished
?time <= 10
  bossFinished = false
:?foe = boss
  ?foe.hp <= 100
    bossFinished = true
  :
    bossFinished = false

var orange = color.FromRGB(255,102,0)

LogTopLeft([
  ["#white",  "", Fmt([loc.name, loc.stars+"â˜†"])],
  ["#white",  "t", Fmt([totaltime, time.FormatCasual(totaltime, true)])],
  ["#white",  "f", Fmt([foe.id])],
  ["#white",  " ", Fmt([
    string.Format("n={0}", foe.Count),
    string.Format("{0}m",  foe.distance),
    string.Format("{0}cp", foe.hp),
  ])],
  ["#yellow", "l",   Fmt([item.left.gp,  FormatItemState(item.left.state),  item.left.time])],
  [orange,    "r",   Fmt([item.right.gp, FormatItemState(item.right.state), item.right.time])],
  ["#blue",   "key", Fmt([string.Break(key, 15)[0]])],
])

?!bossFinished
  LogTopRight(-15, 5, FormatCooldownLogs([
  ^  "blade",
  ^  "bardiche",
  ^  "quarterstaff",
  ^  "heavy_hammer",
  ^  "skeleton_arm",
  ^  "mask",
  ^  "fissure_stone",
  ^]))


LogTopRight(-20, 18, [["#green", Fmt([foe.state, foe.time])]])

// log buffs and debuffs above the player
LogAllBuffsAndDebuffs()

// var LOC_INFO_LOGGED = false
// ?LOC_INFO_LOGGED = false
//   LogTopRight(-20, 19, [["#yellow", FormatLocInfo()]])
//   LOC_INFO_LOGGED = true
