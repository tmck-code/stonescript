// logging print to a specific location ---------------------

func LogStrat(y, l, colour)
  >`0,0,@colour@,strat: @l@

func LogAbovePlayer(l)
  for i = 0 .. l.Count()-1
    >o-20,@-2-i@,@l[i][0]@,@l[i][1]@

func LogTopLeft(l)
  for i = 0 .. l.Count()-1
    >`0,@i+1@,@l[i][0]@,@l[i][1]@: @l[i][2]@

func LogLowerLeft(x, y, color, message)
  y = y + screen.h
  >`@x@,@y@,@color@,@message@

func LogLowerRight(x, y, color, message)
  x = x + screen.w
  y = y + screen.h
  >`@x@,@y@,@color@,@message@

func LogTopRight(x, y_offset, messages)
  var longest = 0

  for i = 0 .. messages.Count()-1
    longest = math.Max(longest, string.Size(messages[i][1]))
  var msg
  var color
  for i = 0 .. messages.Count()-1
    color = messages[i][0]
    msg = messages[i][1]
    // x pos = 
    //   width (go to right of screen)
    // - longest string (make sure they all fit)
    // + offset (align to the right)
    var x = screen.w - longest + (longest - string.Size(msg))
    >`@x@,@y_offset+i+1@,@color@,@msg@

// formatting ----------------------------------------

func FmtValue(value)
  var msg = []
  ?Type(value) ! array
    return string.Format("{0}", value)

  for i = 0 .. value.Count()-1
    ?Type(value) = array
      msg.Add(FmtValue(value[i]))
    :
      msg.Add(string.Format("{0}", value[i]))
  return "["+string.Join(",", msg)+"]"

func Fmt(data)
  var strParts = []
  for i = 0 .. data.Count()-1
    strParts.Add(FmtValue(data[i]))
  return string.Join("/", strParts)

// returns an array of [color, message]
func FormatCooldownLog(weapon)
  var canUse = item.GetCooldown(weapon) <= 0 & item.CanActivate()
  var msg = string.Format("{0}: {1}", weapon, item.GetCooldown(weapon))
  ?!item.CanActivate()
    return ["#red", msg]
  :?item.GetCooldown(weapon) > 200
    return ["#red", msg]
  :?item.GetCooldown(weapon) > 100 & item.GetCooldown(weapon) <= 200
    // orange
    return [color.FromRGB(255,102,0), msg]
  :?item.GetCooldown(weapon) > 0
    return ["#yellow", msg]
  :
    return ["#green", msg]

func FormatCooldownLogs(weapon_ids)
  var logs = []
  for i = 0 .. weapon_ids.Count()-1
    logs.Add(FormatCooldownLog(weapon_ids[i]))
  return logs

func FormatWeaponName(weapon)
  ?weapon = "blade"
    return "Blade of the Fallen God"
  :?weapon = "bardiche"
    return "Bardiche"
  :?weapon = "quarterstaff"
    return "Quarterstaff"
  :?weapon = "heavy_hammer"
    return "Heavy Hammer"
  :
    return weapon

func FormatFoeState()
  ?foe.state = 32
    return "attack prepare"
  :?foe.state = 33
    return "attack do"

// func FormatLocInfo()
//   for i = 0 .. LOC_INFO.Count()-1
//     var k = LOC_INFO[i][0]
//     ?k = loc.id
//       var val = LOC_INFO[i][1]
//       return string.Format("type: {0}, weak: {1}", val[0], val[1])
//   return "type: ??, weak: ??"

// --------------------------

var bossFinished
?time <= 10
  bossFinished = false
:?foe = boss
  ?foe.hp <= 100
    bossFinished = true
  :
    bossFinished = false

var orange = color.FromRGB(255,102,0)

LogTopLeft([
  ["#white",  "level",   Fmt([loc.name, loc.stars+"â˜†"])],
  ["#white",  "time ",   Fmt([totaltime, time.FormatCasual(totaltime, true)])],
  ["#white",  "foe  ",   Fmt([foe.id])],
  ["#white",  "     ",   Fmt([
    string.Format("n={0}", foe.Count),
    string.Format("{0}m",  foe.distance),
    string.Format("{0}cp", foe.hp),
  ])],
  ["#yellow", "l",    Fmt([item.left.gp, item.left.state, item.left.time])],
  [orange,    "r",    Fmt([item.right.gp, item.right.state, item.right.time])],
  ["#white",  "buf ", Fmt([buffs.string])],
  ["#white",  "dbuf", Fmt([debuffs.string])],
  ["#blue",   "key",  Fmt([string.Break(key, 15)[0]])],
])

?!bossFinished
  LogTopRight(-15, 5, FormatCooldownLogs([
  ^  "blade",
  ^  "bardiche",
  ^  "quarterstaff",
  ^  "heavy_hammer",
  ^  "skeleton_arm",
  ^  "mask",
  ^  "fissure_stone",
  ^]))


LogTopRight(-20, 18, [["#green", Fmt([foe.state, foe.time])]])

// var LOC_INFO_LOGGED = false
// ?LOC_INFO_LOGGED = false
//   LogTopRight(-20, 19, [["#yellow", FormatLocInfo()]])
//   LOC_INFO_LOGGED = true
