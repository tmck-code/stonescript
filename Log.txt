// logging print to a specific location ---------------------

func LogStrat(y, l, colour)
  >`0,0,@colour@,strat: @l@

func LogAbovePlayer(l)
  for i = 0 .. l.Count()-1
    >o-20,@-2-i@,@l[i][0]@,@l[i][1]@

func LogTopLeft(l)
  for i = 0 .. l.Count()-1
    >`0,@i+1@,@l[i][0]@,@l[i][1]@: @l[i][2]@

func LogLowerLeft(x, y, color, message)
  y = y + screen.h
  >`@x@,@y@,@color@,@message@

func LogLowerRight(x, y, color, message)
  x = x + screen.w
  y = y + screen.h
  >`@x@,@y@,@color@,@message@

func LogTopRight(x, y_offset, messages)
  var longest = 0

  for i = 0 .. messages.Count()-1
    longest = math.Max(longest, string.Size(messages[i][1]))

  var msg
  var color
  for i = 0 .. messages.Count()-1
    color = messages[i][0]
    msg = messages[i][1]
    // x pos = 
    //   width (go to right of screen)
    // - longest string (make sure they all fit)
    // + offset (align to the right)
    var x = screen.w - longest + (longest - string.Size(msg))
    >`@x@,@y_offset+i+1@,@color@,@msg@

// formatting ----------------------------------------

func Fmt(data)
  var strParts = []
  for i = 0 .. data.Count()-1
    strParts.Add(
    ^  string.Format("{0}", data[i])
    ^)
  return string.Join("/", strParts)

func FmtFoes()
  ?foe.Count > 0
    return string.Format("n:{0}, {1}m - {2}/{3}hp", foe.Count, foe.distance, foe.id, foe.hp)

// returns an array of [color, message]
func FormatCooldownLog(weapon)
  var canUse = item.GetCooldown(weapon) <= 0 & item.CanActivate()
  var msg = string.Format("{0}: {1}", weapon, item.GetCooldown(weapon))
  ?!item.CanActivate()
    return ["#red", msg]
  :?item.GetCooldown(weapon) > 200
    return ["#red", msg]
  :?item.GetCooldown(weapon) > 100 & item.GetCooldown(weapon) <= 200
    // orange
    return [color.FromRGB(255,102,0), msg]
  :?item.GetCooldown(weapon) > 0
    return ["#yellow", msg]
  :
    return ["#green", msg]

func FormatCooldownLogs(weapon_ids)
  var logs = []
  for i = 0 .. weapon_ids.Count()-1
    logs.Add(FormatCooldownLog(weapon_ids[i]))
  return logs

func FormatWeaponName(weapon)
  ?weapon = "blade"
    return "Blade of the Fallen God"
  :?weapon = "bardiche"
    return "Bardiche"
  :?weapon = "quarterstaff"
    return "Quarterstaff"
  :?weapon = "heavy_hammer"
    return "Heavy Hammer"
  :
    return weapon

// --------------------------

var bossFinished
?time <= 10
  bossFinished = false
:?foe = boss
  ?foe.hp <= 100
    bossFinished = true
  :
    bossFinished = false

var orange = color.FromRGB(255,102,0)

LogTopLeft([
  ["#white",  "level", Fmt([loc.name, loc.stars+"â˜†"])],
  ["#white",  "time ", Fmt([totaltime, time.FormatCasual(totaltime, true)])],
  ["#white",  "foe  ", Fmt([FmtFoes()])],
  ["#yellow", "l    ", Fmt([item.left, item.left.gp])],
  [orange,    "r    ", Fmt([item.right, item.right.gp])],
  ["#white",  "buffs  ", Fmt([buffs.string])],
  ["#white",  "debuffs", Fmt([debuffs.string])],
])

?!bossFinished
  LogTopRight(-15, 5, FormatCooldownLogs(["blade","bardiche","quarterstaff","heavy_hammer","skeleton_arm"]))

LogTopRight(-20, 10, [["#green", Fmt([foe.state, foe.time])]])
